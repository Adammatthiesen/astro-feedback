---
import { FeedbackCategories, Websites } from 'astro:db';
import Code from '../components/Code.astro';
import Layout from '../layouts/Layout.astro';

const sampleWebsite: typeof Websites.$inferSelect = {
	id: 1,
	name: 'My Sample Website',
	domain: 'example.com',
	apiKey: 'sample-api-key-123',
	description: 'A sample website for testing the feedback API',
	isActive: true,
	settings: {
		rateLimit: { maxSubmissions: 10, windowMinutes: 60 },
		allowedOrigins: ['https://example.com', 'http://localhost:4321'],
		moderationRequired: false,
		emailNotifications: true,
	},
	createdAt: new Date('2025-08-18T14:13:38.000Z'),
	updatedAt: new Date('2025-08-18T14:13:38.000Z'),
};

const categories: (typeof FeedbackCategories.$inferSelect)[] = [
	{
		id: 1,
		websiteId: 1,
		name: 'Bug Report',
		slug: 'bug',
		description: 'Report bugs and technical issues',
		color: '#e74c3c',
		isActive: true,
		sortOrder: 1,
		createdAt: new Date('2025-08-18T14:13:38.000Z'),
	},
	{
		id: 2,
		websiteId: 1,
		name: 'Feature Request',
		slug: 'feature',
		description: 'Suggest new features or improvements',
		color: '#3498db',
		isActive: true,
		sortOrder: 2,
		createdAt: new Date('2025-08-18T14:13:38.000Z'),
	},
	{
		id: 3,
		websiteId: 1,
		name: 'General Feedback',
		slug: 'general',
		description: 'General comments and suggestions',
		color: '#95a5a6',
		isActive: true,
		sortOrder: 3,
		createdAt: new Date('2025-08-18T14:13:38.000Z'),
	},
];

function buildSnippetSubmit(sampleWebsite: typeof Websites.$inferSelect) {
	return `curl -X POST ${Astro.url.origin}/api/feedback \\
  -H "Content-Type: application/json" \\
  -H "x-api-key: ${sampleWebsite.apiKey}" \\
  -d '${JSON.stringify({
		websiteId: `${sampleWebsite.id}`,
		type: 'bug',
		title: 'Login button not working',
		description: "The login button doesn't respond when clicked",
		email: 'user@example.com',
	})}'`;
}

function buildSnippetGet(sampleWebsite: typeof Websites.$inferSelect) {
	return `curl "${Astro.url.origin}/api/feedback?websiteId=${sampleWebsite.id}&limit=10" \\
  -H "x-api-key: ${sampleWebsite.apiKey}"`;
}

function buildSnippetVote(sampleWebsite: typeof Websites.$inferSelect) {
	return `curl -X POST ${Astro.url.origin}/api/feedback/1/vote \\
  -H "Content-Type: application/json" \\
  -H "x-api-key: ${sampleWebsite.apiKey}" \\
  -d '{"voteType": "up"}'`;
}
---

<Layout title="Feedback API Demo">
  <main class="container mx-auto px-4 py-8 max-w-4xl">
    <h1 class="text-3xl font-bold mb-8 text-center">Astro Feedback API Demo</h1>

      <div class="space-y-8">
        <!-- API Information -->
        <section class="bg-blue-50 p-6 rounded-lg">
          <h2 class="text-xl font-semibold mb-4">API Configuration</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
            <div>
              <strong>Website ID:</strong> {sampleWebsite.id}
            </div>
            <div>
              <strong>Domain:</strong> {sampleWebsite.domain}
            </div>
            <div>
              <strong>API Key:</strong> 
              <code class="bg-gray-200 px-2 py-1 rounded text-xs">{sampleWebsite.apiKey}</code>
            </div>
            <div>
              <strong>Base URL:</strong> {Astro.url.origin}/api
            </div>
          </div>
        </section>

        <!-- Feedback Submission Form -->
        <section class="bg-white border border-gray-200 p-6 rounded-lg">
          <h2 class="text-xl font-semibold mb-4">Submit Feedback</h2>
          <div>For Demo purposes only (this form is not functional)</div>
          <form id="feedback-form" class="space-y-4">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="type">Type</label>
                <select id="type" name="type" required>
                  <option value="bug">Bug Report</option>
                  <option value="feature">Feature Request</option>
                  <option value="improvement">Improvement</option>
                  <option value="question">Question</option>
                  <option value="compliment">Compliment</option>
                  <option value="complaint">Complaint</option>
                  <option value="other">Other</option>
                </select>
              </div>
              
              {categories.length > 0 && (
                <div>
                  <label for="category">Category</label>
                  <select id="category" name="categoryId">
                    <option value="">No category</option>
                    {categories.map(cat => (
                      <option value={cat.id}>{cat.name}</option>
                    ))}
                  </select>
                </div>
              )}
            </div>

            <div>
              <label for="title">Title</label>
              <input type="text" id="title" name="title" required>
            </div>

            <div>
              <label for="description">Description</label>
              <textarea id="description" name="description" rows="4" required></textarea>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="name">Name (optional)</label>
                <input type="text" id="name" name="name">
              </div>
              <div>
                <label for="email">Email (optional)</label>
                <input type="email" id="email" name="email">
              </div>
            </div>

            <button type="submit" class="btn-primary">
              Submit Feedback
            </button>
          </form>

          <div id="submit-result" class="mt-4"></div>
        </section>

        <!-- Recent Feedback -->
        <section class="bg-white border border-gray-200 p-6 rounded-lg">
          <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-semibold">Recent Feedback</h2>
            <button id="refresh-feedback" class="btn-secondary btn-small">
              Refresh
            </button>
          </div>
          <div id="feedback-list" class="space-y-4">
            Loading feedback...
          </div>
        </section>

        <!-- API Examples -->
        <section class="bg-gray-50 p-6 rounded-lg">
          <h2 class="text-xl font-semibold mb-4">API Examples</h2>
          
          <div class="space-y-6">
            <!-- Submit Feedback -->
            <div>
              <h3 class="font-medium mb-2">Submit Feedback</h3>
              <Code code={buildSnippetSubmit(sampleWebsite)} />
            </div>

            <!-- Get Feedback -->
            <div>
              <h3 class="font-medium mb-2">Get Feedback</h3>
              <Code code={buildSnippetGet(sampleWebsite)} />
            </div>

            <!-- Vote on Feedback -->
            <div>
              <h3 class="font-medium mb-2">Vote on Feedback</h3>
              <Code code={buildSnippetVote(sampleWebsite)} />
            </div>
          </div>
        </section>
      </div>
      
  </main>
</Layout>

<script>
  // Load feedback
  async function loadFeedback() {
    const feedbackList = document.getElementById('feedback-list') as HTMLElement;

    try {
      const result = {"success":true,"data":[{"id":1,"websiteId":1,"categoryId":1,"type":"bug","status":"new","priority":"high","title":"Login button not working on mobile","description":"When I try to click the login button on mobile devices, nothing happens. This issue occurs on both iOS and Android.","email":"user1@example.com","name":"John Doe","url":"https://example.com/login","isPublic":true,"upvotes":5,"downvotes":0,"createdAt":"2025-08-18T14:13:38.000Z","updatedAt":"2025-08-18T14:13:38.000Z","categoryName":"Bug Report"},{"id":2,"websiteId":1,"categoryId":2,"type":"feature","status":"in_review","priority":"medium","title":"Add dark mode support","description":"It would be great to have a dark mode option for better user experience during night time browsing.","email":"user2@example.com","name":"Jane Smith","url":"https://example.com","isPublic":true,"upvotes":12,"downvotes":1,"createdAt":"2025-08-18T14:13:38.000Z","updatedAt":"2025-08-18T14:13:38.000Z","categoryName":"Feature Request"},{"id":3,"websiteId":1,"categoryId":3,"type":"compliment","status":"closed","priority":"low","title":"Great website design!","description":"I love the new design of your website. It looks modern and is very easy to navigate.","email":"user3@example.com","name":"Mike Johnson","url":"https://example.com/about","isPublic":true,"upvotes":8,"downvotes":0,"createdAt":"2025-08-18T14:13:38.000Z","updatedAt":"2025-08-18T14:13:38.000Z","categoryName":"General Feedback"}],"pagination":{"total":3,"page":1,"limit":5,"totalPages":1}};
      
      if (result.success && result.data.length > 0) {
        feedbackList.innerHTML = result.data.map(item => `
          <div class="border border-gray-200 p-4 rounded-md">
            <div class="flex justify-between items-start mb-2">
              <h3 class="font-medium">${item.title}</h3>
              <div class="flex items-center space-x-2 text-sm text-gray-500">
                <span class="badge badge-${item.type}">${item.type}</span>
                <span class="badge badge-${item.status}">${item.status}</span>
              </div>
            </div>
            <p class="text-gray-600 text-sm mb-2">${item.description}</p>
            <div class="flex justify-between items-center text-sm text-gray-500">
              <span>${new Date(item.createdAt).toLocaleDateString()}</span>
              <div class="flex items-center space-x-2">
                <button onclick="vote(${item.id}, 'up')" class="vote-button upvote">
                  <span>üëç</span>
                  <span>${item.upvotes}</span>
                </button>
                <button onclick="vote(${item.id}, 'down')" class="vote-button downvote">
                  <span>üëé</span>
                  <span>${item.downvotes}</span>
                </button>
              </div>
            </div>
          </div>
        `).join('');
      } else {
        feedbackList.innerHTML = '<p class="text-gray-500 text-center py-4">No feedback found.</p>';
      }
    } catch (error) {
      feedbackList.innerHTML = `<p class="text-red-500 text-center py-4">Error loading feedback: ${(error as Error).message}</p>`;
    }
  }

  // Refresh button
  const refreshButton = document.getElementById('refresh-feedback');
  if (refreshButton) {
    refreshButton.addEventListener('click', loadFeedback);
  }

  // Load feedback on page load
  loadFeedback();
</script>

<style>
  pre code {
    white-space: pre-wrap;
    word-break: break-all;
  }
</style>
</Layout>
